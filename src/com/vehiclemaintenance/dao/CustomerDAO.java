package com.vehiclemaintenance.dao;

import com.vehiclemaintenance.entity.Customer;
import com.vehiclemaintenance.HibernateUtil;
import org.hibernate.Session;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

public class CustomerDAO {
	
	   // Note: The READ action in the stored procedure uses DBMS_OUTPUT, which isn't practical for frontend use.
    // We'll use Hibernate for reading instead.
    public Customer getCustomerById(Long customerId) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.get(Customer.class, customerId);
        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch customer", e);
        }
    }

    public List<Customer> getAllCustomers() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            return session.createQuery(
                "SELECT c FROM Customer c LEFT JOIN FETCH c.vehicles", Customer.class
            ).getResultList();
        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch customers", e);
        }
    }

    public void addCustomer(Customer customer) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            session.beginTransaction();
            Connection connection = session.doReturningWork(conn -> conn);
            CallableStatement stmt = connection.prepareCall("{call ManageCustomer(?, ?, ?, ?, ?)}");
            stmt.setString(1, "CREATE");
            stmt.setNull(2, java.sql.Types.NUMERIC); // CustomerID is generated by sequence
            stmt.setString(3, customer.getName());
            stmt.setString(4, customer.getEmail());
            stmt.setString(5, customer.getPhone());
            stmt.execute();
            stmt.close();
            session.getTransaction().commit();
        } catch (Exception e) {
            throw new RuntimeException("Failed to add customer", e);
        }
    }

    public void updateCustomer(Customer customer) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            session.beginTransaction();
            Connection connection = session.doReturningWork(conn -> conn);
            System.out.println("Updating customer with ID: " + customer.getCustomerId());
            System.out.println("New Name: " + customer.getName() + ", Email: " + customer.getEmail() + ", Phone: " + customer.getPhone());
            
            // Validate input
            if (customer.getName() == null || customer.getName().trim().isEmpty() ||
                customer.getEmail() == null || customer.getEmail().trim().isEmpty() ||
                customer.getPhone() == null || customer.getPhone().trim().isEmpty()) {
                throw new IllegalArgumentException("All customer fields (Name, Email, Phone) must be provided.");
            }

            CallableStatement stmt = connection.prepareCall("{call ManageCustomer(?, ?, ?, ?, ?)}");
            stmt.setString(1, "UPDATE");
            stmt.setLong(2, customer.getCustomerId());
            stmt.setString(3, customer.getName());
            stmt.setString(4, customer.getEmail());
            stmt.setString(5, customer.getPhone());
            stmt.execute();
            stmt.close();
            session.getTransaction().commit();
            System.out.println("Customer updated successfully: " + customer.getCustomerId());
        } catch (SQLException e) {
            if (e.getErrorCode() == 1) { // ORA-00001: unique constraint violated
                throw new RuntimeException("Email " + customer.getEmail() + " is already in use by another customer.", e);
            }
            System.err.println("Error updating customer: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Failed to update customer", e);
        } catch (Exception e) {
            System.err.println("Error updating customer: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Failed to update customer", e);
        }
    }

    public void deleteCustomer(Long customerId) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            session.beginTransaction();
            System.out.println("Deleting customer with ID: " + customerId);
            Customer customer = session.get(Customer.class, customerId);
            if (customer != null) {
                session.delete(customer);
            } else {
                System.out.println("Customer with ID " + customerId + " not found.");
            }
            session.getTransaction().commit();
            System.out.println("Customer deleted successfully: " + customerId);
        } catch (Exception e) {
            System.err.println("Error deleting customer: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Failed to delete customer", e);
        }
    }
    
    public void refreshCustomer(Customer customer) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            session.beginTransaction();
            session.refresh(customer); // Refreshes the customer and its associations
            session.getTransaction().commit();
        } catch (Exception e) {
            System.err.println("Error refreshing customer via Hibernate: " + e);
            e.printStackTrace();
            throw new RuntimeException("Failed to refresh customer", e);
        }
    }
}