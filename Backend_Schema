-- Table for roles
CREATE TABLE Role (
    RoleID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for roles
    RoleName VARCHAR(50) NOT NULL UNIQUE  -- Name of the role (e.g., Admin, Employee)
);


-- Table for users
CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for users
    Username VARCHAR(50) NOT NULL UNIQUE, -- Unique username for the user
    Password VARCHAR(50) NOT NULL,        -- Password for authentication
    Email VARCHAR(100) NOT NULL UNIQUE,   -- Unique email for login
    RoleID INT NOT NULL,                  -- Foreign key referencing Role
    FOREIGN KEY (RoleID) REFERENCES Role(RoleID)
);


-- Many-to-many relationship between Users and Roles
CREATE TABLE UserRole (
    UserID INT,                            -- Foreign key referencing Users
    RoleID INT,                            -- Foreign key referencing Role
    PRIMARY KEY (UserID, RoleID),          -- Composite primary key
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (RoleID) REFERENCES Role(RoleID) ON DELETE CASCADE
);


-- Table for customers
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for customers
    Name VARCHAR(50) NOT NULL,                -- Customer's name
    Email VARCHAR(100) UNIQUE,                -- Optional: Unique email for the customer
    Phone VARCHAR(20)                         -- Optional: Contact number
);



-- Table for vehicles
CREATE TABLE Vehicle (
    VehicleID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for a vehicle
    Make VARCHAR(50) NOT NULL,               -- Manufacturer of the vehicle
    Model VARCHAR(50) NOT NULL,              -- Model of the vehicle
    Year INT NOT NULL,                       -- Year of manufacture
    LicensePlate VARCHAR(15) UNIQUE NOT NULL,-- Unique license plate number
    OwnerID INT NOT NULL,                    -- Foreign key referencing Customers
    FOREIGN KEY (OwnerID) REFERENCES Customers(CustomerID)
);


-- Service mechanics table
CREATE TABLE Mechanic (
    MechanicID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for a mechanic
    Name VARCHAR(50) NOT NULL,                -- Mechanic's name
    ContactInfo VARCHAR(100)                  -- Optional contact information
);


-- Service records table
CREATE TABLE ServiceRecord (
    ServiceID INT PRIMARY KEY IDENTITY(1,1),  -- Auto-incremented unique identifier for a service
    VehicleID INT NOT NULL,                   -- Foreign key referencing Vehicle
    ServiceDate DATE NOT NULL,                -- Date of service
    Description VARCHAR(255),                 -- Description of the service
    MechanicID INT NOT NULL,                  -- Foreign key referencing Mechanic
    Status VARCHAR(50) NOT NULL,              -- Status of the service (e.g., Pending, Completed)
    FOREIGN KEY (VehicleID) REFERENCES Vehicle(VehicleID) ON DELETE CASCADE,
    FOREIGN KEY (MechanicID) REFERENCES Mechanic(MechanicID) ON DELETE SET NULL
);


-- Table for maintenance schedules
CREATE TABLE MaintenanceSchedule (
    ScheduleID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for the schedule
    VehicleID INT NOT NULL,                   -- Foreign key referencing Vehicle
    ScheduledDate DATE NOT NULL,              -- Date of the scheduled service
    ServiceType VARCHAR(50) NOT NULL,         -- Type of scheduled service
    FOREIGN KEY (VehicleID) REFERENCES Vehicle(VehicleID) ON DELETE CASCADE
);

-- Table for reports
CREATE TABLE Report (
    ReportID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for a report
    VehicleID INT NOT NULL,                 -- Foreign key referencing Vehicle
    ReportType VARCHAR(50) NOT NULL,        -- Type of report
    GeneratedDate DATE NOT NULL,            -- Date the report was generated
    SearchableIndex VARCHAR(100),           -- Optional index for optimized searches
    FOREIGN KEY (VehicleID) REFERENCES Vehicle(VehicleID) ON DELETE CASCADE
);

-- Table for dashboard activities
CREATE TABLE Dashboard (
    ActivityID INT PRIMARY KEY IDENTITY(1,1), -- Auto-incremented unique identifier for the activity
    ActivityType VARCHAR(50) NOT NULL,        -- Type of activity (e.g., Pending, Ongoing)
    UserID INT NOT NULL,                      -- Foreign key referencing Users
    Description VARCHAR(255),                 -- Description of the activity
    Status VARCHAR(50) NOT NULL,              -- Status of the activity
    ActivityDate DATETIME NOT NULL,           -- Date and time of the activity
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
