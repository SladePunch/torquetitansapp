--Develop stored procedures, triggers, and PL/SQL scripts

--Backend implementation
--1.Stored procedures, triggers, and PL/SQL scripts based on your schema and requirements:


--1. Stored Procedure: Add Vehicle
--This procedure allows users (with appropriate roles) to add a new vehicle to the system.

CREATE PROCEDURE AddVehicle(
    @Make VARCHAR(50),
    @Model VARCHAR(50),
    @Year INT,
    @LicensePlate VARCHAR(15),
    @OwnerID INT
)
AS
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM Vehicle WHERE LicensePlate = @LicensePlate
    )
    BEGIN
        INSERT INTO Vehicle (Make, Model, Year, LicensePlate, OwnerID)
        VALUES (@Make, @Model, @Year, @LicensePlate, @OwnerID);
    END
    ELSE
    BEGIN
        PRINT 'Vehicle with the same License Plate already exists.';
    END
END;


--2. Trigger: Prevent Deletion of Active Service Records**
--This trigger blocks users from deleting vehicles that have active service records.


CREATE TRIGGER PreventActiveServiceDeletion
ON Vehicle
INSTEAD OF DELETE
AS
BEGIN
    IF EXISTS (
        SELECT 1 FROM ServiceRecord
        WHERE VehicleID IN (SELECT VehicleID FROM deleted) AND Status = 'Pending'
    )
    BEGIN
        PRINT 'Cannot delete vehicles with active service records.';
    END
    ELSE
    BEGIN
        DELETE FROM Vehicle WHERE VehicleID IN (SELECT VehicleID FROM deleted);
    END
END;



--3. PL/SQL Script: Generate Monthly Maintenance Report**
--This script generates a report for scheduled maintenance for the upcoming month.

DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @NextMonthDate DATE = DATEADD(MONTH, 1, @CurrentDate);

-- Cursor declaration
DECLARE MaintenanceCursor CURSOR FOR
SELECT VehicleID, ScheduledDate, ServiceType
FROM MaintenanceSchedule
WHERE ScheduledDate BETWEEN @CurrentDate AND @NextMonthDate;

-- Variables to hold cursor data
DECLARE @VehicleID INT;
DECLARE @ScheduledDate DATE;
DECLARE @ServiceType VARCHAR(50);

-- Open the cursor
OPEN MaintenanceCursor;

FETCH NEXT FROM MaintenanceCursor INTO @VehicleID, @ScheduledDate, @ServiceType;

-- Iterate through the cursor
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Insert into Report table
    INSERT INTO Report (VehicleID, ReportType, GeneratedDate, SearchableIndex)
    VALUES (
        @VehicleID,
        'Monthly Maintenance',
        @CurrentDate,
        'Maintenance for ' + @ServiceType + ' on ' + FORMAT(@ScheduledDate, 'yyyy-MM-dd')
    );

    FETCH NEXT FROM MaintenanceCursor INTO @VehicleID, @ScheduledDate, @ServiceType;
END;

-- Close and deallocate the cursor
CLOSE MaintenanceCursor;
DEALLOCATE MaintenanceCursor;

-- Commit the transaction
COMMIT;


--4. Stored Procedure: Assign Role to User**
--This procedure allows Admins to assign roles to users.

CREATE PROCEDURE AssignRole(
    @UserID INT,
    @RoleName VARCHAR(50)
)
AS
BEGIN
    DECLARE @RoleID INT;

    -- Fetch RoleID based on RoleName
    SELECT @RoleID = RoleID FROM Role WHERE RoleName = @RoleName;

    IF @RoleID IS NOT NULL
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM UserRole WHERE UserID = @UserID AND RoleID = @RoleID
        )
        BEGIN
            INSERT INTO UserRole (UserID, RoleID)
            VALUES (@UserID, @RoleID);
        END
        ELSE
        BEGIN
            PRINT 'User already has this role.';
        END
    END
    ELSE
    BEGIN
        PRINT 'Role does not exist.';
    END
END;


--5. Trigger: Automatically Add Maintenance Reminder**
This trigger automatically inserts a reminder in the dashboard when a maintenance schedule is created.


CREATE TRIGGER AddMaintenanceReminder
ON MaintenanceSchedule
AFTER INSERT
AS
BEGIN
    INSERT INTO Dashboard (ActivityType, UserID, Description, Status, ActivityDate)
    SELECT 
        'Maintenance Reminder',
        (SELECT OwnerID FROM Vehicle WHERE VehicleID = inserted.VehicleID),
        'Scheduled Maintenance: ' + inserted.ServiceType,
        'Pending',
        GETDATE()
    FROM inserted;
END;
